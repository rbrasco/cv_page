{"version":3,"sources":["components/header/index.js","info.js","pages/homepage/index.js","App.js","serviceWorker.js","index.js"],"names":["tabBar","tabs","className","map","tab","key","label","active","id","writeTab","Header","props","tabInfo","path","info","i","line","depth","array","printLines","Object","keys","subkey","Array","Homepage","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQASMA,EAAS,SAACC,GAAD,OAAU,yBAAKC,UAAU,UACrCD,EAAKE,KAAI,SAAAC,GAAG,OANE,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAKC,EAAP,EAAOA,MAAP,IAAcC,cAAd,gBAAkC,yBAAKL,UAAWK,EAAS,MAAQ,aAAcC,GAAIH,GACrGC,EACD,yBAAKJ,UAAWK,EAAS,QAAU,gBAAnC,MAImBE,CAASL,QAoBbM,EAXA,SAACC,GACd,IAAMC,EAAU,CAAC,CAACP,IAAK,WAAYC,MAAM,WAAY,QAAU,GAAO,CAACD,IAAK,UAAWC,MAAM,iBAC7F,OACE,yBAAKJ,UAAU,eACZF,EAAOY,GAVD,SAAC,GAAD,IAAEP,EAAF,EAAEA,IAAKC,EAAP,EAAOA,MAAP,OAAkB,yBAAKJ,UAAU,QACxC,yBAAKA,UAAU,aAAa,kBAC5B,yBAAKA,UAAU,aAAaG,EAAK,MACjC,yBAAKH,UAAU,aAAaI,IAQ3BO,CAAKD,EAAQ,MCXLE,EAbF,CACX,MAAS,aACT,OAAS,CACP,KAAQ,QACR,MAAS,cAEX,MAAQ,CAAC,UAAW,OAAQ,WAAY,UACxC,QAAU,CACR,UAAa,cACb,KAAQ,0BCPRC,EAAE,EAEAC,EAAO,SAAC,GAAD,IAAED,EAAF,EAAEA,EAAGV,EAAL,EAAKA,IAAKC,EAAV,EAAUA,MAAV,IAAiBW,aAAjB,MAAuB,EAAvB,MAA0BC,aAA1B,gBAA2C,yBAAKhB,UAAU,OAAOM,GAAIO,GAChF,yBAAKb,UAAU,UAAUa,GACzB,yBAAKb,UAAqB,IAAVe,EAAa,WAAY,kBAAmBZ,GACnD,KAARA,EAAa,KAAO,yBAAKH,UAAU,QAAf,KACpBgB,EAAQ,yBAAKhB,UAAU,QAAf,OAAkC,KAC3C,yBAAKA,UAAU,cAAcI,KAGzBa,EAAaC,OAAOC,KAAKP,GAAMX,KAAI,SAACE,GAAD,MAClB,kBAAdS,EAAKT,GAAqBW,EAAK,CAAC,EAAKD,IAAK,IAAOV,EAAK,MAASS,EAAKT,KAC3E,6BACGW,EAAK,CAAC,EAAKD,IAAK,IAAOV,EAAK,MAAS,KACrCe,OAAOC,KAAKP,EAAKT,IAAMF,KAAI,SAACmB,GAAD,OAAYN,EAAK,CAAC,EAAKD,IAAK,IAAOD,EAAKT,aAAgBkB,MAAQ,GAAKD,EAAQ,MAASR,EAAKT,GAAKiB,GAAS,MAAQ,EAAG,MAASR,EAAKT,aAAgBkB,eAcnKC,EAVE,SAACb,GAEhB,OACE,yBAAKT,UAAU,YACViB,ICbYM,G,oOAOjB,OACE,yBAAKvB,UAAU,QACX,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GAXuBwB,IAAMC,YCCnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8f7166df.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nconst writeTab = ({key, label, active = false}) => <div className={active ? \"tab\" : \"tab shadow\"} id={key}>\r\n{label}\r\n<div className={active ? \"xBttn\" : \"xBttn shadow\"}>X</div>\r\n</div>;\r\n\r\nconst tabBar = (tabs) => <div className=\"tabBar\">\r\n  {tabs.map(tab => writeTab(tab))}\r\n</div> \r\n\r\nconst path = ({key, label}) => <div className=\"path\">\r\n      <div className=\"path_text\">{\"rogerbras.co >\"}</div>\r\n      <div className=\"path_text\">{key+ \" >\"}</div>\r\n      <div className=\"path_text\">{label}</div>\r\n      </div>;\r\n\r\nconst Header = (props) => {\r\n  const tabInfo = [{key: \"homepage\", label:\"info.yml\", \"active\": true}, {key: \"aboutme\", label:\"personal.yml\"}]\r\n  return (\r\n    <div className=\"app__header\">\r\n      {tabBar(tabInfo)}\r\n      {path(tabInfo[0])}\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Header;\r\n","const info = {\r\n  \"title\": \"Learn Code\",\r\n  \"author\":{\r\n    \"name\": \"Roger\",\r\n    \"study\": \"Mathmatics\"\r\n  },\r\n  \"codes\":[\"Reactjs\", \"JAVA\", \"C family\", \"Python\"],\r\n  \"contact\":{\r\n    \"instagram\": \"brascoroger\",\r\n    \"mail\": \"brascoroger@gmail.com\"\r\n  }\r\n};\r\n\r\nexport default info;","import React from 'react';\r\nimport info from '../../info'\r\nlet i=1;\r\n\r\nconst line = ({i, key, label, depth=0, array=false}) => <div className=\"line\" id={i}>\r\n  <div className=\"n_line\">{i}</div>\r\n  <div className={depth === 0? \"key_text\": \"key_text moved\"}>{key}</div>\r\n  {key === \"\" ? null : <div className=\"dots\">:</div>}\r\n  {array ? <div className=\"dash\"> - </div> : null}\r\n  <div className=\"label_text\">{label}</div>\r\n</div>;\r\n\r\nconst printLines = Object.keys(info).map((key) =>\r\n  typeof info[key] === \"string\" ?  line({\"i\": i++, \"key\": key, \"label\": info[key]}) : \r\n  <div> \r\n    {line({\"i\": i++, \"key\": key, \"label\": \"\"})}\r\n    {Object.keys(info[key]).map((subkey) => line({\"i\": i++, \"key\": info[key] instanceof Array ? \"\" : subkey, \"label\": info[key][subkey], \"depth\":1, \"array\": info[key] instanceof Array }))}\r\n  </div>  \r\n);\r\n\r\nconst Homepage = (props) => {\r\n\r\n  return (\r\n    <div className=\"homepage\" >\r\n        {printLines}\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\n// import { Route, MemoryRouter as Router } from 'react-router-dom';\r\nimport Header from './components/header';\r\nimport Starfield from './components/starfield';\r\n\r\n import Homepage from './pages/homepage';\r\nimport About from './pages/about';\r\nimport Portofolio from './pages/portofolio';\r\nimport Experience from './pages/experience';\r\nimport Contact from './pages/contact';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  componentDidMount () {\r\n\r\n  }\r\n  render () {\r\n\r\n    return (\r\n      <div className=\"main\" >\r\n          <Header />\r\n\r\n          <Homepage />\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}